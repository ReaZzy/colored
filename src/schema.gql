# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Users {
  id: ID!
  createdDate: DateTime!
  email: String!
  avatar: String!
  login: String!
  password: String!
  posts: [Posts!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Comments {
  id: ID!
  createdDate: DateTime!
  post: Posts!
  user: Users!
  comments: Comments!
  replies: [Comments!]!
  userId: String!
  postId: String!
  content: String!
  commentsId: String!
}

type Posts {
  id: ID!
  createdDate: DateTime!
  color: String!
  content: String!
  user: Users!
  likes: [Users!]!
  comments: [Comments!]!
  userId: String!
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
type PostReturnDto {
  posts: [Posts!]!
  total: Float!
=======
type Avatar {
<<<<<<< HEAD
  imagePath: String!
>>>>>>> 6d8e4fb... refactorðŸ”ƒ: upload avatar to graphql
=======
  avatar: String!
>>>>>>> 697f54b... fixðŸ› : profile uploads
}

=======
>>>>>>> 614316a... refactorðŸ”ƒ: profile to graphql
type LoginDto {
=======
type Login {
>>>>>>> 9d1831b... featðŸ”¨: add auth graphql
=======
=======
type PostReturnDto {
  posts: [Posts!]!
  total: Float!
}

>>>>>>> c22806b... refactorðŸ”ƒ: posts to graphql
type LoginDto {
>>>>>>> 18db429... refactorâš’: logout and getuser graphql
  access_token: String!
  user: Users!
}

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 614316a... refactorðŸ”ƒ: profile to graphql
type Avatar {
  avatar: String!
}

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 6b6a020... refactorðŸ”ƒ: comments to graphql
type commentsOutput {
  comments: [Comments!]!
  total: Int!
}

<<<<<<< HEAD
type Query {
  getPostById(postId: ID!): Posts!
  getAll: [Users!]!
  getUser(find: String!): Users
  getAllComments(postId: String!, page: Float!): commentsOutput!
  getProfile(id: ID): Users!
}

type Mutation {
  createPost(post: PostDataDto!): Posts!
  updatePost(postData: PostUpdateDto!, postId: ID!): Posts!
  like(postId: ID!): Posts!
  unLike(postId: ID!): Posts!
  updateProfile(data: UserUpdateDto!): Users!
  uploadAvatar(file: Upload!): Avatar!
  login(password: String!, find: String!): LoginDto!
  logout: Boolean!
<<<<<<< HEAD
  register(userData: UsersDataDto!): LoginDto!
  createComment(commentsData: CommentsDataDto!, postId: ID!): Comments!
}

input PostDataDto {
  content: String!
  color: String!
  userId: String
}

input PostUpdateDto {
  content: String!
  color: String!
}

input UserUpdateDto {
  email: String
  login: String
  password: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UsersDataDto {
  email: String!
  login: String!
  password: String!
}

input CommentsDataDto {
  content: String!
  repliedTo: String
  postId: String
  userId: String
}

type Subscription {
  getPostSubscription: Posts!
=======
=======
>>>>>>> 9d1831b... featðŸ”¨: add auth graphql
=======
>>>>>>> 614316a... refactorðŸ”ƒ: profile to graphql
type Query {
  getAllPosts(page: Float!): PostReturnDto!
  getPostById(postId: ID!): Posts!
  getAll: [Users!]!
<<<<<<< HEAD
>>>>>>> a6d8cfa... refactorâš’: add graphql
=======
=======
type Query {
  getAllPosts(page: Float!): PostReturnDto!
  getPostById(postId: ID!): Posts!
<<<<<<< HEAD
  getAll(postId: String!, page: Float!): commentsOutput!
>>>>>>> 6b6a020... refactorðŸ”ƒ: comments to graphql
  getUser(find: String!): Users
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 18db429... refactorâš’: logout and getuser graphql
=======
  getProfileImage(imagename: String!): Upload!
>>>>>>> 697f54b... fixðŸ› : profile uploads
=======
>>>>>>> 98415e6... fixðŸ› : get image request
=======
=======
  getAll: [Users!]!
  getUser(find: String!): Users
  getAllComments(postId: String!, page: Float!): commentsOutput!
>>>>>>> 7916a72... featðŸ”¨: delete old avatar on change
  getProfile(id: ID): Users!
>>>>>>> 614316a... refactorðŸ”ƒ: profile to graphql
}

type Mutation {
  createPost(post: PostDataDto!): Posts!
  updatePost(postData: PostUpdateDto!, postId: ID!): Posts!
  like(postId: ID!): Posts!
  unLike(postId: ID!): Posts!
  updateProfile(data: UserUpdateDto!): Users!
  uploadAvatar(file: Upload!): Avatar!
  login(password: String!, find: String!): LoginDto!
  logout: Void!
=======
>>>>>>> e0e9218... fixðŸ› : logout
  register(userData: UsersDataDto!): LoginDto!
  createComment(commentsData: CommentsDataDto!, postId: ID!): Comments!
}

input PostDataDto {
  content: String!
  color: String!
  userId: String
}

input PostUpdateDto {
  content: String!
  color: String!
}

input UserUpdateDto {
  email: String
  login: String
  password: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UsersDataDto {
  email: String!
  login: String!
  password: String!
}

input CommentsDataDto {
  content: String!
  repliedTo: String
  postId: String
  userId: String
}

type Subscription {
  getAllPosts(page: Float!): PostReturnDto!
}
